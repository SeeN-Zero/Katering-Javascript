#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app')
const debug = require('debug')('katering-javascript:server');
const http = require('http');
const Page = require("../model/page");
const User = require("../model/user");
const Code = require('../model/code');

/**
 * Get port from environment and store in Express.
 */
async function initData() {
    const totalP = await Page.estimatedDocumentCount();
    const totalU = await User.estimatedDocumentCount();
    const totalC = await Code.estimatedDocumentCount();
    if (totalU < 1) {
        User.register(new User({username: 'admin'}), 'admin')
    }
    if (totalC < 1) {
        const obj = {
            code: undefined,
            number: undefined
        };
        Code.create(obj, (err) => {
            if (err) {
                console.log(err);
            } else {
                console.log('Initialize Data');
            }
        })
    }
    if (totalP < 1) {
        const obj = {
            setting: undefined,
            title: undefined,
            header: undefined,
            subheader: undefined,
            about: undefined,
            alamat: undefined,
            hp: undefined
        };
        Page.create(obj, (err) => {
            if (err) {
                console.log(err);
            } else {
                console.log('Initialize Data');
            }
        })
    }
}

initData()

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
